{
  "name": "migrator",
  "version": "0.1.5",
  "description": "Take your datas and migrate them",
  "author": {
    "name": "Chris Williams",
    "email": "voodootikigod@gmail.com"
  },
  "contributors": [
    {
      "name": "Miko Borys",
      "email": "fxrock2002@yahoo.com"
    }
  ],
  "main": "./lib/migrator",
  "repository": {
    "type": "git",
    "url": "git://github.com/voodootikigod/migrator.git"
  },
  "bin": {
    "migrator": "./migrator"
  },
  "engines": {
    "node": ">= 0.6.0"
  },
  "dependencies": {
    "babel": "^4.7.16",
    "pg-promise": "^0.8.0"
  },
  "readme": "<pre>\n+-++-++-++-++-++-++-++-+\n|M||i||g||r||a||t||o||r|\n+-++-++-++-++-++-++-++-+\n\nI migrate your data.\n</pre>\n\nHave you ever been building an application and want to track your schema modifications in a meaningful and incremental fashion? Of course you have, we all have! I, for one, had an application that I ported from Rails to express.js and one of the big things I missed was the migrations. I haven't yet ported the \"rollbacks\", because I didn't use them. Also I didn't port over the abstraction layer because, well people should learn SQL especially when it comes to defining schema.\n\nSo what does migrator do?\n=========================\nmigrator will process a directory of migrations, aptly named \"./migrations\", that are a mix of SQL and JS files and process them in ascending order, skipping over ones that have already been processed. Essentially it allows you to have a uniform way of migrating schema and data in a repeatable and dependable fashion. It comes with a executable \"migrator\" that assumes the following conventions:\n\n * You are executing it in the application root which has a directory \"migrations\" and a file \"config.js\" in it. The config file has (at least) the following format (note: if you are using mysql, swap 'postgresql' attribute for 'mysql'):\n\n<pre>\nmodule.exports = {\n  \"development\": {\n    \"postgresql\": \"tcp:postgres@localhost/dev-db\"\n  },\n  \"staging\": {\n    \"postgresql\": \"tcp:postgres@localhost/stage-db\"\n  },\n  \"production\": {\n    \"postgresql\": \"tcp:postgres@localhost/db\"\n  }\n}\n</pre>\n\n * You define your current operating environment as the \"NODE_ENV\" environment variable.\n\nIf those conventions are hip to you then just install migrator using\n\n<pre>\nsudo npm install -g migrator\n</pre>\n\nand run it in the following fashion\n\n<pre>\nmigrator\n</pre>\n\nand you are off migrating. If you don't like those conventions, configure them! The package exports a function \"migrate\" that you can use in the following manner:\n\n<pre>\nrequire(\"migrator\").migrate(\"app_root_path\", \"config_hash_with_attribute_as_above\", options_hash);\n</pre>\n\nFor now the options hash just allows you to change the configured editor, it must be a path to the editor for auto opening new migration files. If you don't provide one, it uses your defined \"EDITOR\" environment variable.\n\nIf you opt for the configuration route, it's generally good to wrap it in an executable script and use it in similar manner to how you use the convention-based migrator.\n\n\nHow do I make migrations?\n=========================\n\nTo create a migration, you can just use\n\n<pre>\nmigrator -g\n</pre>\n\nOR\n\n<pre>\nmigrator generate\n</pre>\n\nThat will create a new file with the current timestamp as an integer with the extension `.sql` and open in the defined editor as described above OR the default environment variable EDITOR (run `echo $EDITOR` to find out what this is for your system).\n\nIf you want to migrate data, create a JS migration using\n\n<pre>\nmigrator -g js\n</pre>\n\nOR\n\n<pre>\nmigrator generate js\n</pre>\n\nand it will open a new file (similar format) with the extension `.js` with the necessary boilerplate to allow for the DB object to be passed in. If you do use the JS one, be sure to execute the callback parameter once all operations are done with a simple `callback()`.\n\nQ&A\n===\n\nYou got questions, I got answers (sometimes) - ping me on twitter [@voodootikigod](http://twitter.com/voodootikigod). If you like this, go out and do something awesome with it, I got your back (but not rollback, at least not yet).\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/voodootikigod/migrator/issues"
  },
  "homepage": "https://github.com/voodootikigod/migrator",
  "_id": "migrator@0.1.4",
  "_from": "migrator@"
}
